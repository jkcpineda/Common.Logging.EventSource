<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventSourceProxy</name>
    </assembly>
    <members>
        <member name="T:EventSourceProxy.Any`1">
            <summary>
            Encapsulates a placeholder value that can be passed to a method.
            </summary>
            <typeparam name="TType">The type of the placeholder.</typeparam>
        </member>
        <member name="P:EventSourceProxy.Any`1.Value">
            <summary>
            Gets the default value for the Any type.
            </summary>
        </member>
        <member name="T:EventSourceProxy.IParameterBuilderBase">
            <summary>
            Configures the parameters that are traced.
            </summary>
            <remarks>These methods are valid regardless of the syntax state.</remarks>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderBase.ForAnything">
            <summary>
            Configures a parameter rule that matches all types and methods.
            </summary>
            <returns>A configuration rule that can be extended.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderBase.For``1">
            <summary>
            Configures a parameter rule that matches the given type.
            </summary>
            <typeparam name="TSource">The type to be matched.</typeparam>
            <returns>A configuration rule that can be extended.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderBase.For``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Configures a parameter rule that matches the given type.
            </summary>
            <typeparam name="TSource">The type to be matched.</typeparam>
            <param name="methodExpression">A lambda expression that contains a method call to match on.</param>
            <returns>A configuration rule that can be extended.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderBase.With``1">
            <summary>
            Begins a block where the expressions are based on the type T.
            </summary>
            <typeparam name="T">The type to use for the expressions.</typeparam>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderBase.With``1(System.String)">
            <summary>
            Begins a block where the expressions are based on the type T, filtered by the given parameter name.
            </summary>
            <typeparam name="T">The type to use for the expressions.</typeparam>
            <param name="parameterName">The parameter name to filter on.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="T:EventSourceProxy.IParameterBuilder">
            <summary>
            Configures the parameters that are traced.
            </summary>
            <remarks>These methods are valid outside of With blocks.</remarks>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.Trace(System.String[])">
            <summary>
            Trace one or more parameters by name.
            </summary>
            <param name="parameterNames">The list of parameters to trace.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.Trace``2(System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Trace an expression, filtering by parameter name, and giving an alias.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TValue">The result of the expression.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterAlias">An alias to use for the parameter.</param>
            <param name="accessorExpressions">One or more expressions to evaluate against the parameter.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.Trace``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Trace an expression, filtering by parameter name.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TValue">The result of the expression.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <param name="accessorExpressions">One or more expressions to evaluate against the parameter.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.Trace``2(System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Trace an expression.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TValue">The result of the expression.</typeparam>
            <param name="accessorExpressions">One or more expressions to evaluate against the parameter.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.Ignore(System.String[])">
            <summary>
            Ignores one or more named parameters.
            </summary>
            <param name="parameterNames">The list of parameters to ignore.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.Ignore(System.Type[])">
            <summary>
            Ignores one or more parameters by type.
            </summary>
            <param name="types">The list of types to ignore.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.Ignore``1">
            <summary>
            Ignores a parameter by type.
            </summary>
            <typeparam name="T">The type to ignore.</typeparam>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.AddContext``1(System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Adds context to the log by calling the given context expression.
            </summary>
            <typeparam name="T">The type returned by the context expression.</typeparam>
            <param name="alias">The alias to use to log the context.</param>
            <param name="contextExpression">The expression to generate the context.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilder.AddContextData``1(System.String,System.String)">
            <summary>
            Adds a context parameter to the logged method. The data is retrieved from TraceContext.GetValue.
            </summary>
            <typeparam name="T">The type returned by the context expression.</typeparam>
            <param name="alias">The alias to use to log the data.</param>
            <param name="key">The key to use to retrieve the data from TraceContext.GetValue.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="T:EventSourceProxy.IParameterBuilderWithParameter">
            <summary>
            Configures the parameters that are traced.
            </summary>
            <remarks>These methods are valid outside of With blocks, when there is at least one parameter defined.</remarks>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithParameter.And(System.String[])">
            <summary>
            Traces additional parameters by name, combining them with the previous item(s) traced.
            </summary>
            <param name="parameterNames">The list of parameters to trace.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithParameter.And``2(System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Traces additional expressions, combining them with the previous item(s) traced.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TValue">The result of the expression.</typeparam>
            <param name="accessorExpressions">One or more expressions to evaluate against the parameter.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithParameter.As(System.String[])">
            <summary>
            Renames the previous item(s) traced.
            If one alias is given, the last traced item is renamed.
            Otherwise, the number of aliases must match the number of items traced in the last bundle.
            </summary>
            <param name="aliases">The set of aliases to use.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithParameter.TogetherAs(System.String)">
            <summary>
            Renames the previous bundle of items traced.
            </summary>
            <param name="alias">The set of aliases to use.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="T:EventSourceProxy.IParameterBuilderWithType`1">
            <summary>
            Configures the parameters that are traced.
            </summary>
            <typeparam name="T">The type of the parameter currently selected.</typeparam>
            <remarks>These methods are valid inside With blocks.</remarks>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithType`1.Trace(System.String[])">
            <summary>
            Trace one or more parameters by name.
            </summary>
            <param name="parameterNames">The list of parameters to trace.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithType`1.Trace``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
            Trace an expression, filtering by parameter name, and giving an alias.
            </summary>
            <typeparam name="TValue">The result of the expression.</typeparam>
            <param name="parameterName">The name of the parameter.</param>
            <param name="accessorExpressions">One or more expressions to evaluate against the parameter.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithType`1.Trace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
            Trace an expression.
            </summary>
            <typeparam name="TValue">The result of the expression.</typeparam>
            <param name="accessorExpressions">One or more expressions to evaluate against the parameter.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithType`1.EndWith">
            <summary>
            Ends a With block.
            </summary>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="T:EventSourceProxy.IParameterBuilderWithTypeAndParameter`1">
            <summary>
            Configures the parameters that are traced.
            </summary>
            <typeparam name="T">The type of the parameter currently selected.</typeparam>
            <remarks>These methods are valid inside With blocks when at least one parameter defined.</remarks>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithTypeAndParameter`1.And(System.String[])">
            <summary>
            Traces additional parameters by name, combining them with the previous item(s) traced.
            </summary>
            <param name="parameterNames">The list of parameters to trace.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithTypeAndParameter`1.And``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
            Traces additional expressions, combining them with the previous item(s) traced.
            </summary>
            <typeparam name="TValue">The result of the expression.</typeparam>
            <param name="accessorExpressions">One or more expressions to evaluate against the parameter.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithTypeAndParameter`1.As(System.String[])">
            <summary>
            Renames the previous item(s) traced.
            If one alias is given, the last traced item is renamed.
            Otherwise, the number of aliases must match the number of items traced in the last bundle.
            </summary>
            <param name="aliases">The set of aliases to use.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.IParameterBuilderWithTypeAndParameter`1.TogetherAs(System.String)">
            <summary>
            Renames the previous bundle of items traced.
            </summary>
            <param name="alias">The set of aliases to use.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="T:EventSourceProxy.ParameterBuilder">
            <summary>
            Implements a ParameterBuilder that binds to any method.
            </summary>
        </member>
        <member name="F:EventSourceProxy.ParameterBuilder._values">
            <summary>
            The values to trace.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.#ctor(EventSourceProxy.TraceParameterProvider)">
            <summary>
            Initializes a new instance of the ParameterBuilder class.
            </summary>
            <param name="tpp">The TraceParameterProvider to bind to.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.Matches(System.Reflection.MethodInfo)">
            <summary>
            Determines whether this ParameterBuilder matches the given method.
            </summary>
            <param name="methodInfo">The method to analyze.</param>
            <returns>True if the method matches.</returns>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.Trace(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.Trace``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.Trace``2(System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.Trace``2(System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.And(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.And``2(System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.And``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.Ignore(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.Ignore(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.Ignore``1">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.As(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.TogetherAs(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.With``1">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.With``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.ForAnything">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.For``1">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.For``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.AddContext``1(System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.AddContextData``1(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.New">
            <summary>
            Constructs a new instance of a ParameterBuilder.
            </summary>
            <returns>A new ParameterBuilder.</returns>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.AndImpl(System.String,System.String,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Implements the And operation by adding values to the builder.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="alias">An optional alias of the parameter.</param>
            <param name="accessorExpression">An optional expression to use.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder.IgnoreImpl(System.String,System.Type)">
            <summary>
            Implements the Ignore operation by adding values to the builder.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="type">An optional type to ignore.</param>
            <returns>A continuation of the configuration.</returns>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilder.Alias">
            <summary>
            Gets the alias to use when outputting this parameter.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilder.Provider">
            <summary>
            Gets the provider that this builder is bound to.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilder.Values">
            <summary>
            Gets the list of values to trace.
            </summary>
        </member>
        <member name="T:EventSourceProxy.ParameterBuilder`1">
            <summary>
            Implements a ParameterBuilder where the type or method has been specified.
            </summary>
            <typeparam name="T">The type of the interface.</typeparam>
        </member>
        <member name="F:EventSourceProxy.ParameterBuilder`1._method">
            <summary>
            The method to bind to.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder`1.#ctor(EventSourceProxy.TraceParameterProvider)">
            <summary>
            Initializes a new instance of the ParameterBuilder class.
            </summary>
            <param name="tpp">The TraceParameterProvider to bind to.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder`1.#ctor(EventSourceProxy.TraceParameterProvider,System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Initializes a new instance of the ParameterBuilder class.
            </summary>
            <param name="tpp">The TraceParameterProvider to bind to.</param>
            <param name="methodExpression">An expression representing the method call to bind to.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder`1.Matches(System.Reflection.MethodInfo)">
            <summary>
            Determines whether this builder matches the given method.
            </summary>
            <param name="methodInfo">The method to analyze.</param>
            <returns>True if this builder matches the given method.</returns>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilder`1.New">
            <summary>
            Constructs a new instance of a ParameterBuilder.
            </summary>
            <returns>A new ParameterBuilder.</returns>
        </member>
        <member name="T:EventSourceProxy.ParameterBuilderWithType`1">
            <summary>
            Wraps the ParameterBuilder configuration within a With block, before a parameter has been logged.
            </summary>
            <typeparam name="T">The type of the With block.</typeparam>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.#ctor(EventSourceProxy.ParameterBuilder,System.String)">
            <summary>
            Initializes a new instance of the ParameterBuilderWithType class.
            </summary>
            <param name="builder">The builder to bind to.</param>
            <param name="parameterName">An optional name of the parameter to filter on.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.Trace(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.Trace``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.Trace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.With``1">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.With``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.EndWith">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.ForAnything">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.For``1">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithType`1.For``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <inheritdoc/>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilderWithType`1.Builder">
            <summary>
            Gets the builder this wrapper is bound to.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilderWithType`1.ParameterName">
            <summary>
            Gets the name of the parameter to filter on.
            </summary>
        </member>
        <member name="T:EventSourceProxy.ParameterBuilderWithTypeAndParameter`1">
            <summary>
            Wraps the ParameterBuilder configuration within a With block, after a parameter has been logged.
            </summary>
            <typeparam name="T">The type of the With block.</typeparam>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithTypeAndParameter`1.#ctor(EventSourceProxy.IParameterBuilderWithParameter,System.String)">
            <summary>
            Initializes a new instance of the ParameterBuilderWithTypeAndParameter class.
            </summary>
            <param name="builder">The builder to bind to.</param>
            <param name="parameterName">An optional name of the parameter to filter on.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithTypeAndParameter`1.And(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithTypeAndParameter`1.And``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithTypeAndParameter`1.As(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderWithTypeAndParameter`1.TogetherAs(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EventSourceProxy.ParameterBuilderValue">
            <summary>
            Represents a value to be extracted from a parameter list.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderValue.#ctor(System.String,System.String,System.Type,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the ParameterBuilderValue class.
            </summary>
            <param name="parameterName">The name of the parameter to bind to, or null to bind to parameters of any name.</param>
            <param name="alias">The name to use to trace the parameter.</param>
            <param name="parameterType">The type of parameter to filter on.</param>
            <param name="converter">An expression used to convert the parameter to another value, or null to use the parameter as it is.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderValue.Matches(System.Reflection.ParameterInfo)">
            <summary>
            Returns all of the parameters that match this value's name and converter.
            </summary>
            <param name="parameter">The parameter to evaluate.</param>
            <returns>An enumeration of the matching parameters.</returns>
        </member>
        <member name="M:EventSourceProxy.ParameterBuilderValue.Matches(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Returns all of the parameters that match this value's name and converter.
            </summary>
            <param name="parameters">The parameters to evaluate.</param>
            <returns>An enumeration of the matching parameters.</returns>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilderValue.Alias">
            <summary>
            Gets or sets the name to use to log the value.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilderValue.ParameterName">
            <summary>
            Gets the name of the parameter to bind to, or null, representing binding to a parameter of any name.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilderValue.ParameterType">
            <summary>
            Gets the type of parameter to bind to.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilderValue.Converter">
            <summary>
            Gets the expression to use to convert the value. If set, the value will only bind to parameters matching the given type.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterBuilderValue.Ignore">
            <summary>
            Gets or sets a value indicating whether the parameter should be ignored.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceTransformAttribute">
            <summary>
            Provides a transformation method which will be used to modify the input value before tracing.
            </summary>
            <remarks>Consumers can derive from this base to create their own methods to run against values being traced.
            This is particularly useful as a means of masking or filtering data.
            </remarks>
        </member>
        <member name="T:EventSourceProxy.TraceAsAttribute">
            <summary>
            Specifies the name to use to trace the given parameter.
            </summary>
            <remarks>
            If multiple parameters are traced into the same name, then they are traced as a string-to-string map,
            and serialized into a string by the TraceSerializationProvider.
            If TraceAsAttribute is applied to a method, then all parameters of the method are traced into the specified name
            unless other TraceAsAttributes are applied.
            </remarks>
        </member>
        <member name="M:EventSourceProxy.TraceAsAttribute.#ctor">
            <summary>
            Initializes a new instance of the TraceAsAttribute class, providing a name for the given parameter.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceAsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TraceAsAttribute class, providing a name for the given parameter.
            </summary>
            <param name="name">The name to trace the parameter as.</param>
        </member>
        <member name="P:EventSourceProxy.TraceAsAttribute.Name">
            <summary>
            Gets the name to use when tracing the parameter.
            </summary>
        </member>
        <member name="P:EventSourceProxy.TraceAsAttribute.Format">
            <summary>
            Gets or sets the String.Format to use when tracing the parameter.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceTransformAttribute.GetTransformMethod(System.Type)">
            <summary>
            Retrieves the MethodInfo for a static method to use for transforming the trace value.
            </summary>
            <remarks>The MethodInfo should correspond to a static method which can handle the supplied input Type.
            The method's response will be used as the trace value.</remarks>
            <param name="inputType">The type of object to bind to.</param>
            <returns>MethodInfo for the method to use.</returns>
        </member>
        <member name="T:EventSourceProxy.TraceContext">
            <summary>
            A thread-static bag of data that can be dropped into any trace.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TraceContext._slot">
            <summary>
            The CallContext slot we use to store our data.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TraceContext._baseContext">
            <summary>
            An outer context.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TraceContext._data">
            <summary>
            The dictionary containing the data.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceContext.#ctor(EventSourceProxy.TraceContext)">
            <summary>
            Initializes a new instance of the TraceContext class.
            </summary>
            <param name="baseContext">The base context.</param>
        </member>
        <member name="M:EventSourceProxy.TraceContext.Begin">
            <summary>
            Starts a new TraceContext scope.
            </summary>
            <returns>The new TraceContext that can be filled in.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceContext.GetValue(System.String)">
            <summary>
            Gets a value associated with the given key in the current scope.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The value associated with the key, or null of the value was not set.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EventSourceProxy.TraceContext.End">
            <summary>
            Ends the TraceContext scope.
            </summary>
        </member>
        <member name="P:EventSourceProxy.TraceContext.Item(System.String)">
            <summary>
            Gets or sets logging values in this scope.
            </summary>
            <param name="key">The key in the data dictionary.</param>
            <returns>The value associated with the key.</returns>
        </member>
        <member name="T:EventSourceProxy.TraceIgnoreAttribute">
            <summary>
            Specifies that a given parameter should not be traced.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceIgnoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the TraceIgnoreAttribute class.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceAsDataAttribute">
            <summary>
            Specifies that the parameter should be traced in an element called "data".
            </summary>
            <remarks>
            If multiple parameters are traced into the same name, then they are traced as a string-to-string map,
            and serialized into a string by the TraceSerializationProvider.
            If TraceAsDataAttribute is applied to a method, then all parameters of the method are traced into the specified name
            unless other TraceAsAttributes are applied.
            </remarks>
        </member>
        <member name="M:EventSourceProxy.TraceAsDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the TraceAsDataAttribute class, providing a name for the given parameter.
            </summary>
        </member>
        <member name="T:EventSourceProxy.EventAttributeProviderAttribute">
            <summary>
            Specifies the TraceSerializationProvider to use for a class or interface.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceProviderAttribute">
            <summary>
            Specifies a TraceProvider for a class or interface.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceProviderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the TraceProviderAttribute class.
            </summary>
            <param name="providerType">The type of the provider to assign to this class or interface.</param>
        </member>
        <member name="P:EventSourceProxy.TraceProviderAttribute.ProviderType">
            <summary>
            Gets the type of the provider to assign to the class or interface.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventAttributeProviderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the EventAttributeProviderAttribute class.
            </summary>
            <param name="providerType">The type of the provider to assign to this class or interface.</param>
        </member>
        <member name="T:EventSourceProxy.EventExceptionAttribute">
            <summary>
            Specifies the EventLevel for an exception generated by a method.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventExceptionAttribute.#ctor(System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Initializes a new instance of the EventExceptionAttribute class.
            </summary>
            <param name="level">The EventLevel to use for exceptions generated by a method.</param>
        </member>
        <member name="P:EventSourceProxy.EventExceptionAttribute.Level">
            <summary>
            Gets the EventLevel to use for exceptions generated by a method.
            </summary>
        </member>
        <member name="T:EventSourceProxy.EventAttributeProvider">
            <summary>
            Provides the Event attributes when generating proxy classes.
            The default implementation uses EventAttribute and EventExceptionAttribute to generate the values.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventAttributeProvider.#ctor">
            <summary>
            Initializes a new instance of the EventAttributeProvider class.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventAttributeProvider.#ctor(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Initializes a new instance of the EventAttributeProvider class.
            </summary>
            <param name="eventLevel">The default EventLevel for events if not specified by EventAttributes.</param>
            <param name="exceptionEventLevel">The default exception events if not specified by EventExceptionAttributes.</param>
        </member>
        <member name="M:EventSourceProxy.EventAttributeProvider.GetEventAttribute(EventSourceProxy.InvocationContext,System.Int32,System.Collections.Generic.IReadOnlyCollection{EventSourceProxy.ParameterMapping})">
            <summary>
            Returns an EventAttribute for the given call context.
            </summary>
            <param name="context">The context of the call.</param>
            <param name="nextEventId">The next event ID to use if not specified by some other mechanism.</param>
            <param name="parameterMapping">The parameter mapping for the method, or null if not a method call.</param>
            <returns>The EventAttribute for the call context.</returns>
        </member>
        <member name="M:EventSourceProxy.EventAttributeProvider.CopyEventAttribute(System.Diagnostics.Tracing.EventAttribute,EventSourceProxy.InvocationContext,System.Int32)">
            <summary>
            Returns an EventAttribute for the Completed or Faulted events for a call context.
            </summary>
            <param name="baseAttribute">The EventAttribute for the method call that should be copied.</param>
            <param name="context">The context of the call.</param>
            <param name="nextEventId">The next event ID to use if not specified by some other mechanism.</param>
            <returns>The EventAttribute for the call context.</returns>
        </member>
        <member name="M:EventSourceProxy.EventAttributeProvider.GetEventLevelForContext(EventSourceProxy.InvocationContext,System.Diagnostics.Tracing.EventAttribute)">
            <summary>
            Gets the appropriate EventLevel for the call context.
            </summary>
            <param name="context">The context of the call.</param>
            <param name="baseAttribute">The base attribute to copy if there are no additional attributes.</param>
            <returns>The EventLevel for the call context.</returns>
        </member>
        <member name="M:EventSourceProxy.EventAttributeProvider.GetEventMessage(EventSourceProxy.InvocationContext,System.Collections.Generic.IReadOnlyCollection{EventSourceProxy.ParameterMapping})">
            <summary>
            Gets the message for an event.
            </summary>
            <param name="context">The context of the call.</param>
            <param name="parameterMapping">The parameter mapping for the method, or null if not a method call.</param>
            <returns>The message for the event.</returns>
        </member>
        <member name="P:EventSourceProxy.EventAttributeProvider.EventLevel">
            <summary>
            Gets the default EventLevel for methods.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventAttributeProvider.ExceptionEventLevel">
            <summary>
            Gets the default EventLevel for exceptions generated by methods.
            </summary>
        </member>
        <member name="T:EventSourceProxy.ParameterDefinition">
            <summary>
            Represents the definition of a parameter.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ParameterDefinition.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the ParameterDefinition class from a parameter.
            </summary>
            <param name="alias">The name of the parameter.</param>
            <param name="position">The position of the parameter on the stack.</param>
            <param name="sourceType">The type of the parameter.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterDefinition.#ctor(System.String,System.Reflection.ParameterInfo,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the ParameterDefinition class from parameter.
            </summary>
            <param name="alias">The name of the parameter.</param>
            <param name="parameterInfo">The parameter to bind to.</param>
            <param name="converter">An optional converter that converts the parameter to a desired result.</param>
        </member>
        <member name="P:EventSourceProxy.ParameterDefinition.Position">
            <summary>
            Gets the position of the parameter.
            </summary>
            <remarks>If less than zero, then there is no source of the parameter.</remarks>
        </member>
        <member name="P:EventSourceProxy.ParameterDefinition.SourceType">
            <summary>
            Gets the type of the parameter.
            </summary>
            <remarks>If null, then there is no source of the parameter.</remarks>
        </member>
        <member name="P:EventSourceProxy.ParameterDefinition.Alias">
            <summary>
            Gets the name to use to log the parameter.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterDefinition.Converter">
            <summary>
            Gets an expression that converts the parameter to the intended logged value.
            </summary>
        </member>
        <member name="T:EventSourceProxy.ParameterMapping">
            <summary>
            Represents the mapping between the caller's parameters and the parameters for the underlying method.
            </summary>
        </member>
        <member name="F:EventSourceProxy.ParameterMapping._sources">
            <summary>
            The sources of the parameter.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ParameterMapping.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterMapping class with an empty source list.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterMapping.AddSource(System.Reflection.ParameterInfo,System.String,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Adds a parameter source to this mapping.
            </summary>
            <param name="pi">The parameter to add.</param>
            <param name="alias">The alias to use to log the parameter.</param>
            <param name="converter">A converter that converts the parameter to a desired value.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterMapping.AddSource``2(System.Reflection.ParameterInfo,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds a parameter source to this mapping.
            </summary>
            <typeparam name="TIn">The input type of the converter.</typeparam>
            <typeparam name="TOut">The output type of the converter.</typeparam>
            <param name="pi">The parameter to add.</param>
            <param name="alias">The alias to use to log the parameter.</param>
            <param name="converter">A converter that converts the parameter to a desired value.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterMapping.AddSource``2(System.Reflection.ParameterInfo,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds a parameter source to this mapping.
            </summary>
            <typeparam name="TIn">The input type of the converter.</typeparam>
            <typeparam name="TOut">The output type of the converter.</typeparam>
            <param name="pi">The parameter to add.</param>
            <param name="converter">A converter that converts the parameter to a desired value.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterMapping.AddContext``1(System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Adds a context method to this mapping.
            </summary>
            <typeparam name="TOut">The output type of the context expression</typeparam>
            <param name="alias">The alias to use to log the context.</param>
            <param name="contextExpression">An expression that can generate context.</param>
        </member>
        <member name="M:EventSourceProxy.ParameterMapping.AddSource(EventSourceProxy.ParameterDefinition)">
            <summary>
            Adds a parameter source to this mapping.
            </summary>
            <param name="source">The parameter to add.</param>
        </member>
        <member name="P:EventSourceProxy.ParameterMapping.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterMapping.Sources">
            <summary>
            Gets the sources of the parameter.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterMapping.TargetType">
            <summary>
            Gets the target type of the parameter.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterMapping.CleanTargetType">
            <summary>
            Gets the target type of the parameter, compatible with ETW.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterMapping.HasSource">
            <summary>
            Gets a value indicating whether this mapping has any sources.
            </summary>
        </member>
        <member name="P:EventSourceProxy.ParameterMapping.SourceType">
            <summary>
            Gets the source type of the parameter.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceMemberAttribute">
            <summary>
            Specifies that a member of the given parameter should be traced as a separate parameter.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TraceMemberAttribute class.
            </summary>
            <param name="member">The name of the member to trace.</param>
        </member>
        <member name="M:EventSourceProxy.TraceMemberAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TraceMemberAttribute class.
            </summary>
            <param name="member">The name of the member to trace.</param>
            <param name="name">The name to use to trace the member.</param>
        </member>
        <member name="P:EventSourceProxy.TraceMemberAttribute.Member">
            <summary>
            Gets the name of the member that will be traced.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceParameterProvider">
            <summary>
            Implements a provider that can bundle the parameters of an interface.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TraceParameterProvider._defaultProvider">
            <summary>
            The default parameter provider.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TraceParameterProvider._builders">
            <summary>
            The list of parameter builders.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProvider.ForAnything">
            <summary>
            Configures a parameter rule that matches all types and methods.
            </summary>
            <returns>A configuration rule that can be extended.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProvider.For``1">
            <summary>
            Configures a parameter rule that matches the given type.
            </summary>
            <typeparam name="TSource">The type to be matched.</typeparam>
            <returns>A configuration rule that can be extended.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProvider.For``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Configures a parameter rule that matches the given type.
            </summary>
            <typeparam name="TSource">The type to be matched.</typeparam>
            <param name="methodExpression">A lambda expression that contains a method call to match on.</param>
            <returns>A configuration rule that can be extended.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProvider.ProvideParameterMapping(System.Reflection.MethodInfo)">
            <summary>
            Returns the parameter mapping for the given method.
            </summary>
            <param name="methodInfo">The method to analyze.</param>
            <returns>A list of ParameterMapping representing the desired bundling of parameters.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProvider.GetParameterProvider(System.Type)">
            <summary>
            Returns the parameter provider for a given type.
            </summary>
            <param name="interfaceType">The type to analyze.</param>
            <returns>The parameter provider for the type.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProvider.Add(EventSourceProxy.ParameterBuilder)">
            <summary>
            Adds a TraceBuilder rule to this provider.
            </summary>
            <param name="builder">The ParameterBuilder to add.</param>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProvider.AddMapping(System.Collections.Generic.List{EventSourceProxy.ParameterMapping},System.Reflection.ParameterInfo,System.String,System.String,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Adds a mapping to the list of mappings
            </summary>
            <param name="mappings">The list of parameter mappings.</param>
            <param name="parameterInfo">The parameter being evaluated.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="alias">The alias to use to output the parameter.</param>
            <param name="converter">An optional expression to use to convert the parameter.</param>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProvider.EvaluateBuilders(System.Reflection.MethodInfo)">
            <summary>
            Uses the TraceBuilder rules on the provider to generate the parameter bindings.
            </summary>
            <param name="methodInfo">The method to analyze.</param>
            <returns>A list of ParameterMapping representing the desired bundling of parameters.</returns>
        </member>
        <member name="P:EventSourceProxy.TraceParameterProvider.Default">
            <summary>
            Gets the default TraceParameterProvider.
            </summary>
        </member>
        <member name="P:EventSourceProxy.TraceParameterProvider.Builders">
            <summary>
            Gets the list of TraceBuilders that have been defined for this provider.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceParameterProviderAttribute">
            <summary>
            Specifies the TraceParameterProvider to use for a given interface.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceParameterProviderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the TraceParameterProviderAttribute class.
            </summary>
            <param name="providerType">The type of provider to use for the given interface.</param>
        </member>
        <member name="T:EventSourceProxy.TraceSerializationAttribute">
            <summary>
            Allows the TraceSerialization level to be adjusted at the class, method, interface, or parameter level.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationAttribute.#ctor(System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Initializes a new instance of the TraceSerializationAttribute class.
            </summary>
            <param name="level">The minimum EventLevel required to enable serialization.</param>
        </member>
        <member name="P:EventSourceProxy.TraceSerializationAttribute.Level">
            <summary>
            Gets the minimum EventLevel required to enable serialization.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceContextAttribute">
            <summary>
            Allows TraceContext to be enabled or disabled at a class or method level.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceContextAttribute.#ctor">
            <summary>
            Initializes a new instance of the TraceContextAttribute class.
            Tracing will be enabled with this constructor.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceContextAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TraceContextAttribute class.
            </summary>
            <param name="enabled">True to enable context logging for all invocations, false to disable context logging for all invocations.</param>
        </member>
        <member name="M:EventSourceProxy.TraceContextAttribute.#ctor(EventSourceProxy.InvocationContextTypes)">
            <summary>
            Initializes a new instance of the TraceContextAttribute class.
            </summary>
            <param name="enabledFor">The types of invocations to enable context logging.</param>
        </member>
        <member name="P:EventSourceProxy.TraceContextAttribute.EnabledFor">
            <summary>
            Gets a value indicating whether the context provider should generate context for the method.
            </summary>
        </member>
        <member name="T:EventSourceProxy.InvocationContext">
            <summary>
            Specifies the invocation of a method and the type of the invocation (MethodCall, MethodCompletion, or MethodFaulted).
            </summary>
        </member>
        <member name="M:EventSourceProxy.InvocationContext.#ctor(System.Reflection.MethodInfo,EventSourceProxy.InvocationContextTypes)">
            <summary>
            Initializes a new instance of the InvocationContext class.
            </summary>
            <param name="methodInfo">The handle of the method being invoked.</param>
            <param name="contextType">The context type for this invocation.</param>
        </member>
        <member name="M:EventSourceProxy.InvocationContext.SpecifyType(EventSourceProxy.InvocationContextTypes)">
            <summary>
            Creates a clone of this InvocationContext, changing the type of the context.
            </summary>
            <param name="contextType">The new InvocationContextType.</param>
            <returns>A clone of this InvocationContext with a new context type.</returns>
        </member>
        <member name="P:EventSourceProxy.InvocationContext.EventSource">
            <summary>
            Gets the EventSource associated with the InvocationContext.
            </summary>
        </member>
        <member name="P:EventSourceProxy.InvocationContext.MethodInfo">
            <summary>
            Gets the method being invoked.
            </summary>
        </member>
        <member name="P:EventSourceProxy.InvocationContext.ContextType">
            <summary>
            Gets the type of the invocation.
            </summary>
        </member>
        <member name="T:EventSourceProxy.InvocationContextTypes">
            <summary>
            Specifies the type of invocation of the method.
            </summary>
        </member>
        <member name="F:EventSourceProxy.InvocationContextTypes.MethodCall">
            <summary>
            The invocation is the method call.
            </summary>
        </member>
        <member name="F:EventSourceProxy.InvocationContextTypes.MethodCompletion">
            <summary>
            The invocation is the completion of the method.
            The parameter is the return value, if any.
            </summary>
        </member>
        <member name="F:EventSourceProxy.InvocationContextTypes.MethodFaulted">
            <summary>
            The invocation is the exception event.
            The parameter is the exception.
            </summary>
        </member>
        <member name="F:EventSourceProxy.InvocationContextTypes.None">
            <summary>
            No types of method invocations.
            </summary>
        </member>
        <member name="F:EventSourceProxy.InvocationContextTypes.BundleParameters">
            <summary>
            The invocation is to bundle a set of parameters into a single parameter.
            The parameter is a string-to-string map.
            </summary>
        </member>
        <member name="F:EventSourceProxy.InvocationContextTypes.All">
            <summary>
            All types of method invocations.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceContextProvider">
            <summary>
            The base class for a TraceContextProvider. TraceContextProvider properly determines whether
            context is needed for a given method invocation.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceContextProvider.ProvideContext(EventSourceProxy.InvocationContext)">
            <summary>
            Provides context information, such as security context, for a trace session.
            </summary>
            <param name="context">The context of the current invocation.</param>
            <returns>A string representing the current context.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceContextProvider.ShouldProvideContext(EventSourceProxy.InvocationContext)">
            <summary>
            Determines whether the given invocation context requires context to be provided.
            </summary>
            <param name="context">The context of the invocation.</param>
            <returns>True if EventSourceProxy should ask for context, false to skip context generation.</returns>
        </member>
        <member name="T:EventSourceProxy.TraceSerializationProviderAttribute">
            <summary>
            Specifies the TraceSerializationProvider to use for a class or interface.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationProviderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the TraceSerializationProviderAttribute class.
            </summary>
            <param name="providerType">The type of the provider to assign to this class or interface.</param>
        </member>
        <member name="T:EventSourceProxy.EventActivityScope">
            <summary>
            Manages the lifetime of an ETW Activity ID.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventActivityScope._slot">
            <summary>
            The name of the call context slot we use for the activity ID.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventActivityScope._previousActivityId">
            <summary>
            The Activity ID outside of this scope. It is restored on the disposal of the scope.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventActivityScope._activityId">
            <summary>
            The Activity ID of this scope.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.#ctor">
            <summary>
            Initializes a new instance of the EventActivityScope class.
            A new Activity ID is generated and assigned to the current thread.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EventActivityScope class.
            A new Activity ID is generated and assigned to the current thread.
            </summary>
            <param name="reuseExistingActivityId">
            True to reuse an existing Activity ID if one is already in use.
            Since EventSource currently does not support Activity ID transfer, you
            may want to call this constructor with 'true' so you are sure to have an Activity ID,
            but to keep the current activity if one has already been established.
            </param>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the EventActivityScope class with a given Activity ID.
            </summary>
            <param name="externalActivityId">
            The existing Activity ID to use.
            </param>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.PrepareForWriteEvent">
            <summary>
            Prepare for WriteEvent by setting the ETW activity ID.
            </summary>
            <remarks>
            The built-in .NET EventSource WriteEvent method does not set the ETW activity ID.
            This method allows EventSources to properly synchronize these values before logging.
            </remarks>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.DoInScope(System.Action)">
            <summary>
            Perform an action within an activity scope.
            This method ensures that an activity scope exists.
            If an activity scope exists, it is reused.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.DoInNewScope(System.Action)">
            <summary>
            Perform an action within a new activity scope.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.Dispose">
            <summary>
            Disposes the current Activity Scope by restoring the previous scope.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.Do(System.Action,System.Boolean)">
            <summary>
            Performs an action in an activity scope.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="newScope">True to always create a new scope.</param>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.GetActivityId">
            <summary>
            Get the current Activity Id.
            </summary>
            <returns>The current activity Id.</returns>
        </member>
        <member name="M:EventSourceProxy.EventActivityScope.SetActivityId(System.Guid)">
            <summary>
            Sets the current Activity Id.
            </summary>
            <param name="activityId">The activity Id to set.</param>
        </member>
        <member name="P:EventSourceProxy.EventActivityScope.CurrentActivityId">
            <summary>
            Gets the current Activity Id.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventActivityScope.PreviousActivityId">
            <summary>
            Gets the Activity ID of the enclosing scope.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventActivityScope.IsNewScope">
            <summary>
            Gets a value indicating whether the Activity ID of the enclosing scope.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventActivityScope.ActivityId">
            <summary>
            Gets the Activity ID of this scope.
            </summary>
        </member>
        <member name="T:EventSourceProxy.NullObjectSerializer">
            <summary>
            Serializes an object by returning null. This is effectively a NoOp.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TraceSerializationProvider">
            <summary>
            Defines a provider that serializes objects to the ETW log when the log cannot handle the type natively.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TraceSerializationProvider._defaultEventLevel">
            <summary>
            The default EventLevel at which to allow serialization.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationProvider.#ctor">
            <summary>
            Initializes a new instance of the TraceSerializationProvider class.
            The default is to only allow serialization in Verbose mode.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationProvider.#ctor(System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Initializes a new instance of the TraceSerializationProvider class.
            </summary>
            <param name="defaultEventLevel">
            The default EventLevel to allow object serialization.
            The default is to serialize objects whenever tracing occurs, but this can be used to allow serialization
            only when logging is at a particular level of verbosity.
            </param>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationProvider.GetEventLevelForContext(EventSourceProxy.TraceSerializationContext)">
            <summary>
            Returns the EventLevel at which to enable serialization for the given context.
            This method looks at the TraceSerializationAttributes on the parameter, method, or class.
            </summary>
            <param name="context">The serialization context to evaluate.</param>
            <returns>The EventLevel at which to enable serialization for the given context.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationProvider.ProvideSerialization(System.Object,EventSourceProxy.TraceSerializationContext)">
            <summary>
            Called by EventSourceProxy to serialize an object. This method should call ShouldSerialize
            then SerializeObject if serialization is enabled.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="context">The serialization context.</param>
            <returns>The serialized value.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationProvider.ShouldSerialize(EventSourceProxy.TraceSerializationContext)">
            <summary>
            Returns if the should the given parameter be serialized.
            </summary>
            <param name="context">The context of the serialization.</param>
            <returns>True if the value should be serialized, false otherwise.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationProvider.SerializeObject(System.Object,EventSourceProxy.TraceSerializationContext)">
            <summary>
            Serializes an object to a string.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="context">The context of the serialization.</param>
            <returns>The serialized representation of the object.</returns>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationProvider.GetSerializationProvider(System.Type)">
            <summary>
            Gets the serialization provider for a given type.
            </summary>
            <param name="type">The type to serialize.</param>
            <returns>The serialization provider or the default JSON provider.</returns>
        </member>
        <member name="M:EventSourceProxy.NullObjectSerializer.#ctor">
            <summary>
            Initializes a new instance of the NullObjectSerializer class.
            The Null serializer serializes everything as null.
            </summary>
        </member>
        <member name="M:EventSourceProxy.NullObjectSerializer.GetEventLevelForContext(EventSourceProxy.TraceSerializationContext)">
            <summary>
            Returns the EventLevel at which to enable serialization for the given context.
            This method looks at the TraceSerializationAttributes on the parameter, method, or class.
            </summary>
            <param name="context">The serialization context to evaluate.</param>
            <returns>The EventLevel at which to enable serialization for the given context.</returns>
        </member>
        <member name="M:EventSourceProxy.NullObjectSerializer.SerializeObject(System.Object,EventSourceProxy.TraceSerializationContext)">
            <summary>
            Serializes an object to a string.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="context">The context of the serialization.</param>
            <returns>The serialized representation of the object.</returns>
        </member>
        <member name="M:EventSourceProxy.NullObjectSerializer.ShouldSerialize(EventSourceProxy.TraceSerializationContext)">
            <summary>
            Returns if the should the given parameter be serialized.
            </summary>
            <param name="context">The context of the serialization.</param>
            <returns>True if the value should be serialized, false otherwise.</returns>
        </member>
        <member name="T:EventSourceProxy.ProxyHelper">
            <summary>
            Methods to help with building proxies.
            </summary>
        </member>
        <member name="F:EventSourceProxy.ProxyHelper.AssemblyName">
            <summary>
            The name of the generated dynamic assembly.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ProxyHelper.CopyGenericSignature(System.Reflection.MethodInfo,System.Reflection.Emit.MethodBuilder)">
            <summary>
            Copy the generic attributes of a method.
            </summary>
            <param name="sourceMethod">The source method.</param>
            <param name="targetMethod">The target method.</param>
        </member>
        <member name="M:EventSourceProxy.ProxyHelper.CopyMethodSignature(System.Reflection.MethodInfo,System.Reflection.Emit.MethodBuilder)">
            <summary>
            Copies the method signature from one method to another.
            This includes generic parameters, constraints and parameters.
            </summary>
            <param name="sourceMethod">The source method.</param>
            <param name="targetMethod">The target method.</param>
        </member>
        <member name="M:EventSourceProxy.ProxyHelper.EmitSerializeValue(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.MethodBuilder,EventSourceProxy.InvocationContext,System.Collections.Generic.List{EventSourceProxy.InvocationContext},System.Reflection.Emit.FieldBuilder,EventSourceProxy.ParameterMapping,EventSourceProxy.TraceSerializationProvider,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Emits the code needed to properly push an object on the stack,
            serializing the value if necessary.
            </summary>
            <param name="typeBuilder">The TypeBuilder for the method being built.</param>
            <param name="methodBuilder">The method currently being built.</param>
            <param name="invocationContext">The invocation context for this call.</param>
            <param name="invocationContexts">A list of invocation contexts that will be appended to.</param>
            <param name="invocationContextsField">The static field containing the array of invocation contexts at runtime.</param>
            <param name="parameterMapping">The mapping of source parameters to destination parameters.</param>
            <param name="serializationProvider">The serialization provider for the current interface.</param>
            <param name="serializationProviderField">
            The field on the current object that contains the serialization provider at runtime.
            This method assume the current object is stored in arg.0.
            </param>
        </member>
        <member name="M:EventSourceProxy.ProxyHelper.EmitSerializeValue(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.MethodBuilder,EventSourceProxy.InvocationContext,System.Collections.Generic.List{EventSourceProxy.InvocationContext},System.Reflection.Emit.FieldBuilder,System.Int32,System.Type,System.Type,System.Linq.Expressions.LambdaExpression,EventSourceProxy.TraceSerializationProvider,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Emits the code needed to properly push an object on the stack,
            serializing the value if necessary.
            </summary>
            <param name="typeBuilder">The TypeBuilder for the method being built.</param>
            <param name="methodBuilder">The method currently being built.</param>
            <param name="invocationContext">The invocation context for this call.</param>
            <param name="invocationContexts">A list of invocation contexts that will be appended to.</param>
            <param name="invocationContextsField">The static field containing the array of invocation contexts at runtime.</param>
            <param name="i">The index of the current parameter being pushed.</param>
            <param name="sourceType">The type that the parameter is being converted from.</param>
            <param name="targetType">The type that the parameter is being converted to.</param>
            <param name="converter">An optional converter to apply to the source type.</param>
            <param name="serializationProvider">The serialization provider for the current interface.</param>
            <param name="serializationProviderField">
            The field on the current object that contains the serialization provider at runtime.
            This method assume the current object is stored in arg.0.
            </param>
        </member>
        <member name="M:EventSourceProxy.ProxyHelper.ParametersMatch(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Determine if the parameters of a method match a list of parameter types.
            </summary>
            <param name="m">The method to test.</param>
            <param name="targetTypes">The list of parameter types.</param>
            <returns>True if the types of parameters match.</returns>
        </member>
        <member name="M:EventSourceProxy.ProxyHelper.DiscoverMethods(System.Type)">
            <summary>
            Discovers the methods that need to be implemented for a type.
            </summary>
            <param name="type">The type to implement.</param>
            <returns>The virtual and abstract methods that need to be implemented.</returns>
        </member>
        <member name="M:EventSourceProxy.ProxyHelper.EmitDefaultValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits the code to load the default value of a type onto the stack.
            </summary>
            <param name="mIL">The ILGenerator to emit to.</param>
            <param name="type">The type of object to emit.</param>
        </member>
        <member name="T:EventSourceProxy.ToStringObjectSerializer">
            <summary>
            Serializes objects by calling ToString on them.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ToStringObjectSerializer.#ctor">
            <summary>
            Initializes a new instance of the ToStringObjectSerializer class.
            The default is to allow serialization whenever tracing occurs.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ToStringObjectSerializer.#ctor(System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Initializes a new instance of the ToStringObjectSerializer class.
            </summary>
            <param name="defaultEventLevel">
            The default EventLevel to allow object serialization.
            The default is to serialize objects whenever tracing occurs, but this can be used to allow serialization
            only when logging is at a particular level of verbosity.
            </param>
        </member>
        <member name="M:EventSourceProxy.ToStringObjectSerializer.SerializeObject(System.Object,EventSourceProxy.TraceSerializationContext)">
            <summary>
            Serializes an object to a string.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="context">The context of the serialization.</param>
            <returns>The serialized representation of the object.</returns>
        </member>
        <member name="T:EventSourceProxy.EventAttributeHelper">
            <summary>
            Helps emit attribute data to IL.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventAttributeHelper._eventAttributeConstructor">
            <summary>
            The constructor for EventAttribute.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventAttributeHelper._eventAttributePropertyInfo">
            <summary>
            The array of properties used to serialize the custom attribute values.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventAttributeHelper._emptyParameters">
            <summary>
            A set of empty parameters that can be sent to a method call.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventAttributeHelper.ConvertEventAttributeToAttributeBuilder(System.Diagnostics.Tracing.EventAttribute)">
            <summary>
            Converts an EventAttribute to a CustomAttributeBuilder so it can be assigned to a method.
            </summary>
            <param name="attribute">The attribute to copy.</param>
            <returns>A CustomAttributeBuilder that can be assigned to a method.</returns>
        </member>
        <member name="M:EventSourceProxy.EventAttributeHelper.CreateNonEventAttribute">
            <summary>
            Creates an empty NonEventAttribute.
            </summary>
            <returns>A CustomAttributeBuilder that can be added to a method.</returns>
        </member>
        <member name="T:EventSourceProxy.EventSourceAttributeHelper">
            <summary>
            Helps emit attribute data to IL.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventSourceAttributeHelper._eventSourceAttributeConstructor">
            <summary>
            The constructor for EventSourceAttribute.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventSourceAttributeHelper._eventSourceAttributePropertyInfo">
            <summary>
            The array of properties used to serialize the custom attribute values.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventSourceAttributeHelper._typesImplemented">
            <summary>
            Manages a list of the types that have been implemented so far.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventSourceAttributeHelper._emptyParameters">
            <summary>
            An empty parameter list.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventSourceAttributeHelper.GetEventSourceAttributeBuilder(System.Type)">
            <summary>
            Copies the EventSourceAttribute from the interfaceType to a CustomAttributeBuilder.
            </summary>
            <param name="type">The interfaceType to copy.</param>
            <returns>A CustomAttributeBuilder that can be assigned to a type.</returns>
        </member>
        <member name="T:EventSourceProxy.EventSourceImplementationAttribute">
            <summary>
            Specifies the classes to use for the Keywords, Tasks, and Opcodes enumerations for an EventSource.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventSourceImplementationAttribute._attributes">
            <summary>
            The overridden attributes
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventSourceImplementationAttribute._implementComplementMethods">
            <summary>
            Specifies whether complement methods should be emitted.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementationAttribute.For``1(EventSourceProxy.EventSourceImplementationAttribute)">
            <summary>
            Overrides the EventSourceImplementationAttribute for a type. Allows you to define logging for other people's interfaces.
            </summary>
            <typeparam name="T">The type of interface we are overriding.</typeparam>
            <param name="attribute">The new EventSourceImplementationAttribute for the type.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementationAttribute.GetAttributeFor(System.Type)">
            <summary>
            Get the EventSourceImplementationAttribute for a type.
            </summary>
            <param name="type">The type.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.Name">
            <summary>
            Gets or sets the name of the EventSource. This overrides any EventSource attribute.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.ThrowOnEventWriteErrors">
            <summary>
            Gets or sets a value indicating whether event write errors should throw. Used when constructing the EventSource.  This specifies whether to throw an exception when an error occurs in the underlying Windows code.  Default is false.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.Guid">
            <summary>
            Gets or sets a value indicating whether the guid of the EventSource. This overrides any EventSource attribute.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.LocalizationResources">
            <summary>
            Gets or sets the LocalizationResources of the EventSource. This overrides any EventSource attribute.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.AutoKeywords">
            <summary>
            Gets or sets a value indicating whether the EventSource should auto-generate keywords.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.Keywords">
            <summary>
            Gets or sets the type that contains the Keywords enumeration for the EventSource.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.Tasks">
            <summary>
            Gets or sets the type that contains the Tasks enumeration for the EventSource.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.OpCodes">
            <summary>
            Gets or sets the type that contains the Opcodes enumeration for the EventSource.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.Level">
            <summary>
            Gets or sets the default event level for the EventSource.
            </summary>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementationAttribute.ImplementComplementMethods">
            <summary>
            Gets or sets a value indicating whether the _Completed and _Faulted methods should be implemented
            on the EventSource. The default (null) indicates that complement methods are implemented on all classes
            that do not derive from EventSource.
            </summary>
        </member>
        <member name="T:EventSourceProxy.EventSourceImplementer">
            <summary>
            Completes the implementation of an EventSource by generating a class from an interface or from an abstract class.
            </summary>
        </member>
        <member name="F:EventSourceProxy.EventSourceImplementer._eventSources">
            <summary>
            The cache of constructors.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.GetEventSourceAs``1">
            <summary>
            Implements an EventSource that matches the virtual or abstract methods of a type.
            If the type is an interface, this creates a type derived from EventSource that implements the interface.
            If the type is a class derived from EventSource, this derives from the type and implements any abstract methods.
            If the type is a class not derived from EventSource, this method fails while casting to T. Use GetEventSource instead.
            </summary>
            <typeparam name="T">An type to implement as an EventSource.</typeparam>
            <returns>An EventSource that is compatible with the given type.</returns>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.GetEventSource``1">
            <summary>
            Implements an EventSource that matches the virtual or abstract methods of a type.
            If the type is an interface, this creates a type derived from EventSource that implements the interface.
            If the type is a class derived from EventSource, this derives from the type and implements any abstract methods.
            If the type is a class not derived from EventSource, this creates a type derived from EventSource that implements
            method that match the virtual methods of the target type.
            </summary>
            <typeparam name="T">An type to implement as an EventSource.</typeparam>
            <returns>An EventSource that is compatible with the given type.</returns>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.GetEventSource(System.Type)">
            <summary>
            Implements an EventSource that matches the virtual or abstract methods of a type.
            If the type is an interface, this creates a type derived from EventSource that implements the interface.
            If the type is a class derived from EventSource, this derives from the type and implements any abstract methods.
            If the type is a class not derived from EventSource, this creates a type derived from EventSource that implements
            method that match the virtual methods of the target type.
            </summary>
            <param name="type">An type to implement as an EventSource.</param>
            <returns>An EventSource that is compatible with the given type.</returns>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider``1(EventSourceProxy.TraceContextProvider)">
            <summary>
            Registers a Context Provider for a given event source.
            </summary>
            <typeparam name="TLog">The type of event source to register with.</typeparam>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider(System.Type,EventSourceProxy.TraceContextProvider)">
            <summary>
            Registers a Context Provider for a given event source.
            </summary>
            <param name="type">The type of event source to register with.</param>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterDefaultProvider(EventSourceProxy.TraceContextProvider)">
            <summary>
            Registers a default TraceContextProvider for all event sources.
            </summary>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider``1(EventSourceProxy.TraceSerializationProvider)">
            <summary>
            Registers a Serialization Provider for a given event source.
            </summary>
            <typeparam name="TLog">The type of event source to register with.</typeparam>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider(System.Type,EventSourceProxy.TraceSerializationProvider)">
            <summary>
            Registers a Serialization Provider for a given event source.
            </summary>
            <param name="type">The type of event source to register with.</param>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterDefaultProvider(EventSourceProxy.TraceSerializationProvider)">
            <summary>
            Registers a default TraceSerializationProvider for all event sources.
            </summary>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider``1(EventSourceProxy.EventAttributeProvider)">
            <summary>
            Registers an EventAttributeProvider for a given event source.
            </summary>
            <typeparam name="TLog">The type of event source to register with.</typeparam>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider(System.Type,EventSourceProxy.EventAttributeProvider)">
            <summary>
            Registers a EventAttributeProvider for a given event source.
            </summary>
            <param name="type">The type of event source to register with.</param>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterDefaultProvider(EventSourceProxy.EventAttributeProvider)">
            <summary>
            Registers a default EventAttributeProvider for all event sources.
            </summary>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider``1(EventSourceProxy.TraceParameterProvider)">
            <summary>
            Registers an TraceParameterProvider for a given event source.
            </summary>
            <typeparam name="TLog">The type of event source to register with.</typeparam>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider(System.Type,EventSourceProxy.TraceParameterProvider)">
            <summary>
            Registers a TraceParameterProvider for a given event source.
            </summary>
            <param name="type">The type of event source to register with.</param>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterDefaultProvider(EventSourceProxy.TraceParameterProvider)">
            <summary>
            Registers a default TraceParameterProvider for all event sources.
            </summary>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.GetKeywordValue``1(System.String)">
            <summary>
            Gets the keyword value for a method on a type.
            </summary>
            <typeparam name="T">The type of the EventSource.</typeparam>
            <param name="methodName">The name of the method.</param>
            <returns>The keyword value.</returns>
        </member>
        <member name="M:EventSourceProxy.EventSourceImplementer.RegisterProvider(System.Type,System.Type,System.Object)">
            <summary>
            Registers a Provider for a given event source.
            </summary>
            <param name="logType">The type of event source to register with. If null, then the default provider is overridden.</param>
            <param name="providerType">The type of provider being provided.</param>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="P:EventSourceProxy.EventSourceImplementer.ForceAutoKeywords">
            <summary>
            Gets or sets a value indicating whether EventSources should always have auto-keywords.
            Set this to true if you were using ESP before v3.0 and need auto-keywords to be on.
            </summary>
        </member>
        <member name="T:EventSourceProxy.EventSourceManifest">
            <summary>
            Exposes ETW manifest information for provider types.
            </summary>
        </member>
        <member name="M:EventSourceProxy.EventSourceManifest.GetGuidFromProviderName(System.String)">
            <summary>
            Return the GUID of a provider name.
            </summary>
            <param name="providerName">The name of the provider.</param>
            <returns>The GUID representing the name.</returns>
        </member>
        <member name="M:EventSourceProxy.EventSourceManifest.GetGuid(System.Type)">
            <summary>
            Return the GUID of a provider.
            </summary>
            <param name="type">The provider type.</param>
            <returns>The GUID representing the name.</returns>
        </member>
        <member name="M:EventSourceProxy.EventSourceManifest.GenerateManifest(System.Type)">
            <summary>
            Return the manifest of a provider for the given type.
            </summary>
            <param name="type">The provider type.</param>
            <returns>The XML manifest content.</returns>
        </member>
        <member name="T:EventSourceProxy.JsonObjectSerializer">
            <summary>
            Used internally to serialize a string. By default, it uses Newtonsoft.Json to JSON serialize the object.
            </summary>
        </member>
        <member name="M:EventSourceProxy.JsonObjectSerializer.#ctor">
            <summary>
            Initializes a new instance of the JsonObjectSerializer class.
            The default is to serialize objects only in Verbose tracing.
            </summary>
        </member>
        <member name="M:EventSourceProxy.JsonObjectSerializer.#ctor(System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Initializes a new instance of the JsonObjectSerializer class.
            </summary>
            <param name="defaultEventLevel">
            The default EventLevel to allow object serialization.
            The default is to serialize objects whenever tracing occurs, but this can be used to allow serialization
            only when logging is at a particular level of verbosity.
            </param>
        </member>
        <member name="M:EventSourceProxy.JsonObjectSerializer.SerializeObject(System.Object,EventSourceProxy.TraceSerializationContext)">
            <summary>
            Serializes an object to a string.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="context">The context of the serialization.</param>
            <returns>The serialized representation of the object.</returns>
        </member>
        <member name="T:EventSourceProxy.ProviderManager">
            <summary>
            Manages the providers for the Event Sources.
            </summary>
        </member>
        <member name="F:EventSourceProxy.ProviderManager._providers">
            <summary>
            The list of registered providers.
            </summary>
        </member>
        <member name="M:EventSourceProxy.ProviderManager.RegisterProvider(System.Type,System.Type,System.Object)">
            <summary>
            Registers a Provider for a given event source.
            </summary>
            <param name="logType">The type of event source to register with.</param>
            <param name="providerType">The type of provider being provided.</param>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:EventSourceProxy.ProviderManager.GetProvider``1(System.Type,System.Type,System.Func{``0})">
            <summary>
            Gets the given type of provider for the given type of log.
            </summary>
            <typeparam name="T">The type of provider being provided.</typeparam>
            <param name="logType">The type of event source to register with.</param>
            <param name="attributeType">The type of the ProviderAttribute that can specify the provider.</param>
            <param name="defaultConstructor">The constructor to use to create the provider if it does not exist.</param>
            <returns>The provider for a given type, or null if there is no provider.</returns>
        </member>
        <member name="M:EventSourceProxy.ProviderManager.GetProvider(System.Type,System.Type,System.Type,System.Func{System.Object})">
            <summary>
            Gets the given type of provider for the given type of log.
            </summary>
            <param name="logType">The type of event source to register with.</param>
            <param name="providerType">The type of provider being provided.</param>
            <param name="attributeType">The type of the ProviderAttribute that can specify the provider.</param>
            <param name="defaultConstructor">The constructor to use to create the provider if it does not exist.</param>
            <returns>The provider for a given type, or null if there is no provider.</returns>
        </member>
        <member name="T:EventSourceProxy.TraceContextProviderAttribute">
            <summary>
            Specifies the TraceContextProvider to use for a class or interface.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceContextProviderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the TraceContextProviderAttribute class.
            </summary>
            <param name="providerType">The type of the provider to assign to this class or interface.</param>
        </member>
        <member name="T:EventSourceProxy.TraceSerializationContext">
            <summary>
            Describes the context in which an object is being serialized.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TraceSerializationContext.#ctor(EventSourceProxy.InvocationContext,System.Int32)">
            <summary>
            Initializes a new instance of the TraceSerializationContext class.
            </summary>
            <param name="invocationContext">The InvocationContext this is based on.</param>
            <param name="parameterIndex">The index of the parameter being serialized.</param>
        </member>
        <member name="P:EventSourceProxy.TraceSerializationContext.ParameterIndex">
            <summary>
            Gets the index of the parameter being serialized.
            </summary>
        </member>
        <member name="P:EventSourceProxy.TraceSerializationContext.EventLevel">
            <summary>
            Gets the EventLevel required to serialize this object.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TracingProxy">
            <summary>
            Constructs a proxy out of a logger and an object to give you automatic logging of an interface.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxy._constructors">
            <summary>
            A cache of the constructors for the proxies.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TracingProxy.CreateWithActivityScope``1(System.Object)">
            <summary>
            Creates a tracing proxy around the T interface or class of the given object.
            Events will log to the EventSource defined for type T.
            The proxy will trace any virtual or interface methods of type T.
            </summary>
            <typeparam name="T">The interface or class to proxy and log.</typeparam>
            <param name="instance">The instance of the object to log.</param>
            <returns>A proxy object of type T that traces calls.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxy.Create``1(System.Object)">
            <summary>
            Creates a tracing proxy around the T interface or class of the given object.
            Events will log to the EventSource defined for type T.
            The proxy will trace any virtual or interface methods of type T.
            The proxy will not create an Activity Scope. You should use CreateWithActivityScope unless you know that
            your context will have an Activity Scope and you want to optimize performance a little.
            </summary>
            <typeparam name="T">The interface or class to proxy and log.</typeparam>
            <param name="instance">The instance of the object to log.</param>
            <returns>A proxy object of type T that traces calls.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxy.CreateWithActivityScope``2(``0)">
            <summary>
            Creates a tracing proxy around the T interface or class of the given object
            and attempts to log to an alternate EventSource defined by TEventSource.
            Events will log to the EventSource defined for type TEventSource.
            The proxy will trace any methods that match the signatures of methods on TEventSource.
            </summary>
            <typeparam name="T">The interface or class to proxy and log.</typeparam>
            <typeparam name="TEventSource">The matching interface to log to.</typeparam>
            <param name="instance">The instance of the object to log.</param>
            <returns>A proxy object of type T that traces calls.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxy.Create``2(``0)">
            <summary>
            Creates a tracing proxy around the T interface or class of the given object
            and attempts to log to an alternate EventSource defined by TEventSource.
            Events will log to the EventSource defined for type TEventSource.
            The proxy will trace any methods that match the signatures of methods on TEventSource.
            The proxy will not create an Activity Scope. You should use CreateWithActivityScope unless you know that
            your context will have an Activity Scope and you want to optimize performance a little.
            </summary>
            <typeparam name="T">The interface or class to proxy and log.</typeparam>
            <typeparam name="TEventSource">The matching interface to log to.</typeparam>
            <param name="instance">The instance of the object to log.</param>
            <returns>A proxy object of type T that traces calls.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxy.CreateWithActivityScope(System.Object,System.Type)">
            <summary>
            Creates a tracing proxy around the T interface or class of the given object.
            Events will log to the EventSource defined for type T.
            The proxy will trace any virtual or interface methods of type T.
            </summary>
            <param name="instance">The instance of the object to log.</param>
            <param name="interfaceType">The type of interface to log on.</param>
            <returns>A proxy object of type interfaceType that traces calls.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxy.Create(System.Object,System.Type)">
            <summary>
            Creates a tracing proxy around the T interface or class of the given object.
            Events will log to the EventSource defined for type T.
            The proxy will trace any virtual or interface methods of type T.
            The proxy will not create an Activity Scope. You should use CreateWithActivityScope unless you know that
            your context will have an Activity Scope and you want to optimize performance a little.
            </summary>
            <param name="instance">The instance of the object to log.</param>
            <param name="interfaceType">The type of interface to log on.</param>
            <returns>A proxy object of type interfaceType that traces calls.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxy.CreateInternal(System.Object,System.Type,System.Type,System.Boolean)">
            <summary>
            Creates a proxy out of a logger and an object to give you automatic logging of an instance.
            The logger and object must implement the same interface.
            </summary>
            <param name="execute">The instance of the object that executes the interface.</param>
            <param name="executeType">The type of the execute object.</param>
            <param name="logType">The type on the log object that should be mapped to the execute object.</param>
            <param name="callWithActivityScope">True to create a proxy that guarantees there is an activity scope around each call.</param>
            <returns>A proxy object of type T that logs to the log object and executes on the execute object.</returns>
        </member>
        <member name="T:EventSourceProxy.TracingProxyImplementer">
            <summary>
            Generates a class that implements a TracingProxy.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer.LogFieldName">
            <summary>
            The name of the field to store the log instance.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer.ExecuteFieldName">
            <summary>
            The name of the field to store the execute instance.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer.SerializerFieldName">
            <summary>
            The name of the field to store the serializer instance.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._createParameterTypes">
            <summary>
            The types of parameters passed to the tracing proxy constructor.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._executeType">
            <summary>
            The type of object to execute.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._logType">
            <summary>
            The type of object to log.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._callWithActivityScope">
            <summary>
            True when the proxy should create a new activity scope around its method calls.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._serializationProvider">
            <summary>
            The serialization provider for the type.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._typeBuilder">
            <summary>
            The type builder for the type.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._executeField">
            <summary>
            The field containing the object to execute.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._logField">
            <summary>
            The static field containing the logger.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._serializerField">
            <summary>
            The static field containing the serialization provider.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._invocationContexts">
            <summary>
            The list of invocation contexts during code generation.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TracingProxyImplementer._invocationContextsField">
            <summary>
            The static field holding the invocation contexts at runtime.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TracingProxyImplementer.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the TracingProxyImplementer class.
            </summary>
            <param name="executeType">The type of object to execute.</param>
            <param name="logType">The type of object to log.</param>
            <param name="callWithActivityScope">True to generate a proxy that wraps an activity scope around all calls.</param>
        </member>
        <member name="M:EventSourceProxy.TracingProxyImplementer.ImplementProxy(System.Diagnostics.Tracing.EventSource)">
            <summary>
            Implements a logging proxy around a given interface type.
            </summary>
            <param name="log">The log to use for the proxy.</param>
            <returns>A static method that can be used to construct the proxy.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxyImplementer.EmitFieldsAndConstructor">
            <summary>
            Emits the proxy fields and a constructor.
            </summary>
            <returns>The constructor.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxyImplementer.EmitCreateImpl(System.Reflection.ConstructorInfo)">
            <summary>
            Emits a method to construct a new proxy.
            </summary>
            <param name="constructorInfo">The constructor to call.</param>
            <returns>A static method to construct the proxy.</returns>
        </member>
        <member name="M:EventSourceProxy.TracingProxyImplementer.EmitMethodImpl(System.Reflection.MethodInfo)">
            <summary>
            Emits the implementation of a given interface method.
            </summary>
            <param name="executeMethod">The execute method to implement.</param>
        </member>
        <member name="M:EventSourceProxy.TracingProxyImplementer.EmitBaseMethodCall(System.Reflection.Emit.MethodBuilder,EventSourceProxy.InvocationContext,System.Reflection.FieldInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Emits a call to the base method by pushing all of the arguments.
            </summary>
            <param name="m">The method to append to.</param>
            <param name="invocationContext">The invocation context for this call.</param>
            <param name="field">The field containing the interface to call.</param>
            <param name="originalMethod">The the original method signature.</param>
            <param name="baseMethod">The method to call.</param>
        </member>
        <member name="M:EventSourceProxy.TracingProxyImplementer.DiscoverMethod(System.Type,System.String,System.String,System.Type[])">
            <summary>
            Discover the given method on the type or a base interface.
            </summary>
            <param name="type">The type to analyze.</param>
            <param name="methodName">The name of the method to look up.</param>
            <param name="suffix">A suffix on the method name to look up.</param>
            <param name="parameterTypes">The types of parameters.</param>
            <returns>The method information or null.</returns>
        </member>
        <member name="P:EventSourceProxy.TracingProxyImplementer.CreateMethod">
            <summary>
            Gets a method that can be used to create the proxy.
            </summary>
        </member>
        <member name="T:EventSourceProxy.TypeImplementer">
            <summary>
            Implements a given type as an EventSource.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer.CompletedSuffix">
            <summary>
            The suffix for the _Completed methods.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer.FaultedSuffix">
            <summary>
            The suffix for the _Faulted methods.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer.Keywords">
            <summary>
            The name of the Keywords class.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer.Opcodes">
            <summary>
            The name of the Opcodes class.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer.Tasks">
            <summary>
            The name of the Tasks class.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer.Context">
            <summary>
            The name of the context parameter.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer.ReturnValue">
            <summary>
            The name of the return value parameter.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer.ReservedKeywordValue">
            <summary>
            The maximum user-defined Keywords value since Windows 8.1.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._writeEvent">
            <summary>
            The WriteEvent method for EventSource.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._writeEventNoParams">
            <summary>
            The WriteEvent method for EventSource.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._isEnabled">
            <summary>
            The IsEnabled method for EventSource.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._interfaceType">
            <summary>
            The type being implemented.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._typeBuilder">
            <summary>
            The type builder being used for the new type.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._contextProviderField">
            <summary>
            The field containing the context provider.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._serializationProviderField">
            <summary>
            The field containing the serialization provider.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._traceParameterProvider">
            <summary>
            Provides the trace parameters for event methods.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._eventAttributeProvider">
            <summary>
            Provides the event attributes for the event methods.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._contextProvider">
            <summary>
            The context provider for this type.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._serializationProvider">
            <summary>
            The serialization provider for this type.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._invocationContexts">
            <summary>
            The list of invocation contexts during code generation.
            </summary>
        </member>
        <member name="F:EventSourceProxy.TypeImplementer._invocationContextsField">
            <summary>
            The static field holding the invocation contexts at runtime.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.#ctor(System.Type,EventSourceProxy.TraceParameterProvider)">
            <summary>
            Initializes a new instance of the TypeImplementer class.
            </summary>
            <param name="interfaceType">The type to implement.</param>
            <param name="parameterProvider">An optional parameter provider to use when building the type. Used for testing.</param>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.TypeIsSupportedByEventSource(System.Type)">
            <summary>
            Returns true if a given type is supported as a parameter to EventSource.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type can be sent to EventSource, false if it needs to be encoded.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.GetTypeSupportedByEventSource(System.Type)">
            <summary>
            Given a type, returns the type that EventSource supports.
            This dereferences pointers and converts unsupported types to strings.
            </summary>
            <param name="type">The type to translate.</param>
            <returns>The associated type that EventSource supports.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.ImplementType">
            <summary>
            Implement the type.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.FoldMethodName(System.Reflection.MethodInfo)">
            <summary>
            Folds common method names together if the base method name also exists on the interface.
            </summary>
            <param name="methodInfo">The method to fold.</param>
            <returns>The name to use for keyword logging.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitFields">
            <summary>
            Emit the internal fields.
            </summary>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitMethodImpl(EventSourceProxy.InvocationContext,System.Int32@,System.Diagnostics.Tracing.EventKeywords)">
            <summary>
            Emits an implementation of a given method.
            </summary>
            <param name="invocationContext">The InvocationContext for this call.</param>
            <param name="eventId">The next eventID to use.</param>
            <param name="autoKeyword">The auto-keyword to use if enabled.</param>
            <returns>The method that is implemented.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitMethodCompletedImpl(EventSourceProxy.InvocationContext,System.Reflection.MethodInfo,System.Int32@,System.Diagnostics.Tracing.EventKeywords,System.Reflection.Emit.MethodBuilder)">
            <summary>
            Emits a _Completed version of a given event that logs the result of an operation.
            The _Completed event is used by TracingProxy to signal the end of a method call.
            </summary>
            <param name="invocationContext">The InvocationContext for this call.</param>
            <param name="beginMethod">The begin method for this interface call.</param>
            <param name="eventId">The next available event ID.</param>
            <param name="autoKeyword">The auto-keyword to use if enabled.</param>
            <param name="faultedMethod">A faulted method to call or null if no other faulted method is available.</param>
            <returns>The MethodBuilder for the method.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitMethodFaultedImpl(EventSourceProxy.InvocationContext,System.Reflection.MethodInfo,System.Int32@,System.Diagnostics.Tracing.EventKeywords)">
            <summary>
            Emits a _Faulted version of a given event that logs the result of an operation.
            The _Completed event is used by TracingProxy to signal an exception in a method call.
            </summary>
            <param name="invocationContext">The InvocationContext for this call.</param>
            <param name="beginMethod">The begin method for this interface call.</param>
            <param name="eventId">The next available event ID.</param>
            <param name="autoKeyword">The auto-keyword to use if enabled.</param>
            <returns>The MethodBuilder for the method.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitMethodComplementImpl(EventSourceProxy.InvocationContext,System.String,System.Type,System.String,System.Reflection.MethodInfo,System.Int32@,System.Diagnostics.Tracing.EventKeywords,System.Reflection.Emit.MethodBuilder)">
            <summary>
            Emits a method to complement an interface method. The complement method will have a suffix such as _Completed,
            and will take one parameter.
            </summary>
            <param name="invocationContext">The InvocationContext for this call.</param>
            <param name="suffix">The suffix to use on the method.</param>
            <param name="parameterType">The type of the parameter of the method.</param>
            <param name="parameterName">The name of the parameter of the method.</param>
            <param name="beginMethod">The begin method for this interface call.</param>
            <param name="eventId">The next available event ID.</param>
            <param name="autoKeyword">The auto-keyword to use if enabled.</param>
            <param name="faultedMethod">A faulted method to call or null if no other faulted method is available.</param>
            <returns>The MethodBuilder for the method.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitTaskCompletion(System.Reflection.Emit.MethodBuilder,System.Type,System.Reflection.Emit.MethodBuilder)">
            <summary>
            Emit the code required to defer the logging of a task until completion.
            </summary>
            <param name="methodBuilder">The method to append to.</param>
            <param name="parameterType">The type of parameter being passed.</param>
            <param name="faultedMethod">A faulted method to call if the task is faulted. null if there is no handler.</param>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitIsEnabled(System.Reflection.Emit.MethodBuilder,System.Diagnostics.Tracing.EventAttribute)">
            <summary>
            Emits the code to determine whether logging is enabled.
            For NonEvents, this emits the default return value to the method, and returns false here.
            </summary>
            <param name="methodBuilder">The MethodBuilder to implement.</param>
            <param name="eventAttribute">The EventAttribute.</param>
            <returns>True if events could possibly be enabled, false if this method is a NonEvent.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitCallWriteEvent(EventSourceProxy.InvocationContext,System.Reflection.Emit.MethodBuilder,System.Diagnostics.Tracing.EventAttribute,System.Collections.Generic.List{EventSourceProxy.ParameterMapping})">
            <summary>
            Emit a call to WriteEvent(param object[]).
            </summary>
            <param name="invocationContext">The InvocationContext for this call.</param>
            <param name="methodBuilder">The MethodBuilder to append to.</param>
            <param name="eventAttribute">The EventAttribute to use as values in the method.</param>
            <param name="parameterMapping">The mapping of the parameters.</param>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitDirectProxy(EventSourceProxy.InvocationContext,System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo,System.Collections.Generic.List{EventSourceProxy.ParameterMapping})">
            <summary>
            Emits a proxy to a method that just calls the base method.
            </summary>
            <param name="invocationContext">The current invocation context.</param>
            <param name="methodBuilder">The method to implement.</param>
            <param name="baseMethod">The base method.</param>
            <param name="parameterMapping">The mapping of the parameters.</param>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitEnumImplementation(System.Type,System.String,System.Type)">
            <summary>
            Emits an implementation of an enum class.
            </summary>
            <param name="enumSourceType">The source enum class to copy.</param>
            <param name="className">The name of the class.</param>
            <param name="codeType">The type of code to extract.</param>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.FindNestedType(System.Type,System.String)">
            <summary>
            Find a nested type defined in this class or a base class.
            </summary>
            <param name="searchType">The class to search.</param>
            <param name="className">The name of the class to find.</param>
            <returns>The given nested type or null if not found.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.EmitKeywordImpl(System.Collections.Generic.Dictionary{System.String,System.UInt64})">
            <summary>
            When the Keywords enum is not defined, emit the implementation of the Keywords enum, automatically generated from the interface.
            </summary>
            <param name="autoKeywords">The list of logging methods to use to generate the enum.</param>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.SupportsContext(EventSourceProxy.InvocationContext)">
            <summary>
            Determines whether the given invocation supports a context provider.
            </summary>
            <param name="invocationContext">The current InvocationContext.</param>
            <returns>True if the context provider should be invoked for the context.</returns>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.ValidateEventMessage(System.Diagnostics.Tracing.EventAttribute,System.Reflection.MethodInfo,System.Collections.Generic.List{EventSourceProxy.ParameterMapping})">
            <summary>
            Validates that the message text for an event has the correct number of parameters.
            </summary>
            <param name="eventAttribute">The attribute to check.</param>
            <param name="method">The method being invoked.</param>
            <param name="parameters">The parameter mapping for the method.</param>
        </member>
        <member name="M:EventSourceProxy.TypeImplementer.GetDefaultStringFormatValue(System.Type)">
            <summary>
            Get the default String.Format value for a type.
            </summary>
            <param name="type">The type being passed to String.Format.</param>
            <returns>A value.</returns>
        </member>
        <member name="P:EventSourceProxy.TypeImplementer.EventSource">
            <summary>
            Gets the EventSource created by this implementer.
            </summary>
        </member>
        <member name="T:EventSourceProxy.UnsafeNativeMethods">
            <summary>
            Internal unsafe methods.
            </summary>
        </member>
        <member name="F:EventSourceProxy.UnsafeNativeMethods.ActivityIdGet">
            <summary>
            Get the current Activity ID.
            </summary>
        </member>
        <member name="F:EventSourceProxy.UnsafeNativeMethods.ActivityIdSet">
            <summary>
            Set the current Activity ID.
            </summary>
        </member>
        <member name="F:EventSourceProxy.UnsafeNativeMethods.Success">
            <summary>
            Success code.
            </summary>
        </member>
        <member name="M:EventSourceProxy.UnsafeNativeMethods.SetActivityId(System.Guid)">
            <summary>
            Sets the current Activity ID.
            </summary>
            <param name="guid">The new Activity Id.</param>
            <returns>The previous Activity ID.</returns>
        </member>
        <member name="M:EventSourceProxy.UnsafeNativeMethods.CallEventActivityIdControl(System.Int32,System.Guid@)">
            <summary>
            Calls EventActivityIdControl and throws an exception on failure.
            </summary>
            <param name="controlCode">The control code for the method.</param>
            <param name="activityId">The ActivityId to get or set.</param>
        </member>
    </members>
</doc>
